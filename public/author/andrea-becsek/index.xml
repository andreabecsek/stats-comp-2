<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andrea Becsek on Statistical Computing 2 Portfolio</title>
    <link>/author/andrea-becsek/</link>
    <description>Recent content in Andrea Becsek on Statistical Computing 2 Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 17 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/author/andrea-becsek/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deep Learning</title>
      <link>/post/deep-learning/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/deep-learning/</guid>
      <description>Introduction to Neural Networks Neural Networks are learning algorithms inspired by the connectivity of real-life neurons, since they seem to be doing a pretty good job. The key idea is that we have various layers of inter-connected neurons. The inputs that we have form the first layer, and the aim is to obtain an output. However, between these two layers, there are numerous hidden layers that communicate with each other.</description>
    </item>
    
    <item>
      <title>Intro to HPC</title>
      <link>/post/intro-to-hpc/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/intro-to-hpc/</guid>
      <description>High performance computing is a way to process data much faster than a single computer possibly could. This is achieved by parallelizing code across a cluster of computer and nodes.
Logging in Setting up VPN (if not on university premises) If you are not on university premises you will have to set up the University VPN. Setting up a connection on Linux can be done as follows:
Go to https://uobnet2.</description>
    </item>
    
    <item>
      <title>Introduction to OpenMP</title>
      <link>/post/introduction-to-openmp/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-openmp/</guid>
      <description>OpenMP is an interface that provides support for parallel programming. The easiest thing we can do is create a simple C++ code, compile it and run it multiple times in parallel.
We wrote the hello.cpp code and compiled it.
#include &amp;lt;iostream&amp;gt; int main() { #pragma omp parallel { std::cout &amp;lt;&amp;lt; &amp;quot;Hello from OpenMP!\n&amp;quot;; } return 0; }  Note that we included a single new line, #pragma omp parallel which simply mentions that the code between the brackets is what we aim to parallelize.</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>/post/python/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/python/</guid>
      <description>We are going to focus on objected oriented programming with Python. We have already talked about the main concepts of OOP and seen how they work in R. To make the transition easier, we are going to follow a similar structure to the in the R OOP portfolio.
Create class with constructor We start by creating a Shape class and initialize it with the variable side_lengths and name.
import numpy as np class Shape: def __init__(self, name, side_lengths): self.</description>
    </item>
    
    <item>
      <title>Advanced Rcpp</title>
      <link>/post/advanced-rcpp/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/advanced-rcpp/</guid>
      <description>Load dataset on solar electricity production in Sydney
set.seed(123) # load dataset solar &amp;lt;- readRDS(&amp;#39;../data/solarAU.RDS&amp;#39;) # reduce dataset to 2000 observations solar &amp;lt;- solar[1:2000,] # create a log production variable solar$logprod &amp;lt;- log(solar$prod + 0.01) head(solar) ## prod toy tod logprod ## 8832 0.019 0.000000e+00 0 -3.540459 ## 8833 0.032 5.708088e-05 1 -3.170086 ## 8834 0.020 1.141618e-04 2 -3.506558 ## 8835 0.038 1.712427e-04 3 -3.036554 ## 8836 0.036 2.283235e-04 4 -3.</description>
    </item>
    
    <item>
      <title>Intro to C&#43;&#43;</title>
      <link>/post/intro-to-c/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/intro-to-c/</guid>
      <description>C++ is a statically typed, compiled language, and it can be used across multiple platforms. Moreover, C++ is a great programming language for high-performance computing as it provides the user with much control over memory and system resources. It is also great for object-oriented programming and therefore it is used for a wide range of applications.
Creating a C++ program and some basic syntax Write your code using a text editor and save as filename.</description>
    </item>
    
    <item>
      <title>Rcpp</title>
      <link>/post/rcpp/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/rcpp/</guid>
      <description>The aim of this portfolio is to demonstrate the usage of C++ in conjunction with R via the Rcpp package. The application that we are considering is the adaptive kernel regression smoothing.
Simulate data generated by the model \[y_i = sin(\alpha\pi x^3)+z_i, \;\; \text{where}\;z_i \sim\mathcal{N}(0,\sigma^2),\]
for \(i=1, \cdots, 400\), \(\alpha=4\), and \(\sigma=0.2\).
set.seed(42) n &amp;lt;- 400 x &amp;lt;- runif(n) y &amp;lt;- sin(4 * pi * x^3) + rnorm(n, 0, 0.</description>
    </item>
    
  </channel>
</rss>